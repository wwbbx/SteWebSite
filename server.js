// Generated by CoffeeScript 1.6.3
var BlockModel, app, application_root, blocks, express, mongoose, path, port;

application_root = __dirname;

express = require('express');

path = require('path');

mongoose = require('mongoose');

app = express();

app.configure(function() {
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express["static"](path.join(application_root, 'site')));
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

mongoose.connect('mongodb://localhost/SteWebSiteDB');

blocks = new mongoose.Schema({
  title: String,
  description: String,
  image: String
});

BlockModel = mongoose.model('Block', blocks);

app.get('/api/blocks', function(request, response) {
  return BlockModel.find(function(err, blocks) {
    if (!err) {
      return response.send(blocks);
    } else {
      return console.l(err);
    }
  });
});

app.get('/api/blocks/:id', function(request, response) {
  return BlockModel.findById(request.params.id, function(err, block) {
    if (!err) {
      return response.send(block);
    } else {
      return console.log(err);
    }
  });
});

app.put('/api/blocks/:id', function(request, response) {
  console.log('Updating block ' + request.body.title);
  return BlockModel.findById(request.params.id, function(err, block) {
    block.title = request.body.title;
    block.description = request.body.description;
    block.image = request.body.image;
    return block.save(function(err) {
      if (!err) {
        return console.log('block updated.');
      } else {
        return console.log(err);
      }
      return response.send(block);
    });
  });
});

app["delete"]('/api/blocks/:id', function(request, response) {
  console.log('Deleting book with id: ' + request.body.id);
  return BlockModel.findById(request.params.id, function(err, block) {
    return block.remove(function(err) {
      if (!err) {
        console.log('Book removed');
        return response.send('');
      } else {
        return console.log(err);
      }
    });
  });
});

app.post('/api/blocks', function(request, response) {
  var block;
  block = new BlockModel({
    title: request.body.title,
    description: request.body.description,
    image: request.body.image
  });
  block.save(function(err) {
    if (!err) {
      return console.log('created');
    } else {
      return console.log(err);
    }
  });
  return response.send(block);
});

port = 4711;

app.listen(port, function() {
  return console.log('Express server listening on port %d in %s mode', port, app.settings.env);
});
